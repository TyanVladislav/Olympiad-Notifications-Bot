from telegram import ReplyKeyboardMarkup, Update, ReplyKeyboardRemove, ParseMode
from telegram.ext import (
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    Filters,
)

from handlers.auth import MAIN_MENU, start
import database.db as db
import re
import math

EVENTS_PER_PAGE = 10
NAV_BACK, NAV_HOME, NAV_NEXT = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥"
BROWSE = 0      # —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler


def _send_events_page(update: Update, context: CallbackContext, page: int) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ + –Ω–∞–≤–∏–≥–∞—Ü–∏—é."""
    user_id = update.effective_user.id

    # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤ user_data
    if "all_events" not in context.user_data:
        context.user_data["all_events"] = db.get_upcoming_events(limit=9999)

    events = context.user_data["all_events"]
    total_pages = math.ceil(len(events) / EVENTS_PER_PAGE)
    page = max(0, min(page, total_pages - 1))
    context.user_data["events_page"] = page

    start_idx = page * EVENTS_PER_PAGE
    slice_ = events[start_idx:start_idx + EVENTS_PER_PAGE]
    context.user_data["events_slice"] = [ev[0] for ev in slice_]      # id-—à–Ω–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    lines = [f"üìå *–í—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã*  (—Å—Ç—Ä. {page+1}/{total_pages})",
             "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:"]
    subs_now = {ev_id for ev_id, *_ in db.get_user_subscriptions(user_id)}

    for i, (ev_id, name, date, *_rest) in enumerate(slice_, start=1):
        star = "‚≠ê " if ev_id in subs_now else ""
        lines.append(f"{i}. {date} ‚Äî {star}{name}")

    # —Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = [b for b in (
        NAV_BACK if page else None,
        NAV_HOME,
        NAV_NEXT if page < total_pages - 1 else None
    ) if b]

    reply_markup = ReplyKeyboardMarkup([nav_row], resize_keyboard=True, one_time_keyboard=False)
    text = "\n".join(lines)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ—â–µ, —á–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    update.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=reply_markup,
        disable_web_page_preview=True,
    )


def all_events_start(update: Update, context: CallbackContext) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äì –∫–æ–º–∞–Ω–¥–∞ /events –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üìå –í—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã¬ª."""
    # –æ—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    for key in ("all_events", "events_page", "events_slice"):
        context.user_data.pop(key, None)

    _send_events_page(update, context, page=0)
    return BROWSE


def all_events_handle(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏–±–æ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤, –ª–∏–±–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."""
    text = update.message.text.strip()

    # --- –ù–ê–í–ò–ì–ê–¶–ò–Ø ----------------------------------------------------------
    if text == NAV_BACK:
        _send_events_page(update, context, context.user_data["events_page"] - 1)
        return BROWSE

    if text == NAV_NEXT:
        _send_events_page(update, context, context.user_data["events_page"] + 1)
        return BROWSE

    if text == NAV_HOME:
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return ConversationHandler.END

    # --- –ü–û–î–ü–ò–°–ö–ê –ü–û –ù–û–ú–ï–†–ê–ú -----------------------------------------------
    if not re.fullmatch(r"\d+(?:\s*,\s*\d+)*", text):
        update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.")
        return BROWSE

    user_id = update.effective_user.id
    slice_ids = context.user_data.get("events_slice", [])
    to_sub = []

    for part in text.split(","):
        idx = int(part.strip()) - 1
        if 0 <= idx < len(slice_ids):
            to_sub.append(slice_ids[idx])
        else:
            update.message.reply_text("‚ùó –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return BROWSE

    for ev_id in to_sub:
        db.subscribe_user(user_id, ev_id)

    update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    _send_events_page(update, context, context.user_data["events_page"])
    return BROWSE


def all_events_cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ª–∏–º–ø–∏–∞–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    )
    return ConversationHandler.END


# ---------------------------------------------------------------------------
# ConversationHandler, –∫–æ—Ç–æ—Ä—ã–π –º—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ main.py
events_conversation = ConversationHandler(
    entry_points=[
        CommandHandler("events", all_events_start),
        MessageHandler(Filters.regex(r'^üìå –í—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã$'), all_events_start),
    ],
    states={
        BROWSE: [MessageHandler(Filters.text & ~Filters.command, all_events_handle)],
    },
    fallbacks=[CommandHandler("cancel", all_events_cancel)],
    allow_reentry=True,
)


def show_events(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 5 –±–ª–∏–∂–∞–π—à–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥ –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ø–∏—Å–∫–æ–º."""
    user_id = update.effective_user.id
    events = db.get_upcoming_events(limit=5)          # –±–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–∏–µ 5
    subs = {ev_id for ev_id, *_ in db.get_user_subscriptions(user_id)}

    lines = ["üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã*:"]
    for ev_id, name, date, *_ in events:
        star = "‚≠êÔ∏è " if ev_id in subs else ""
        lines.append(f"{date} ‚Äî {star}{name}")

    update.message.reply_text(
        "\n".join(lines),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
